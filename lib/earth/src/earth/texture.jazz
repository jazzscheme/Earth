;;;==============
;;;  GaeaScheme
;;;==============
;;;
;;;; Earth Texture
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module earth.texture jazz


(import (jazz.application)
        (jazz.graphic)
        (jazz.io)
        (jazz.markup)
        (jazz.platform)
        (jazz.process)
        (jazz.opengl)
        (jazz.opengl.glew)
        (jazz.opengl.texture)
        (jazz.opengl.window)
        (jazz.screen)
        (gaea.array)
        (gaea.buffer)
        (gaea.generate)
        (gaea.geometry)
        (gaea.mesh)
        (gaea.mesher)
        (gaea.program)
        (gaea.program.mesh)
        (gaea.program.texture)
        (gaea.shader)
        (gaea.texture)
        (gaea.uv))


;;;
;;;; Window
;;;


(class Texture-Window extends OpenGL-Window
  
  
  (form
    (<install> caption-base: "Texture"))
  
  
  ;; Programs
  (slot mesh-program        initialize #f getter generate)
  
  ;; Meshes
  (slot texture-mesh        initialize #f getter generate)
  
  ;; Matrices
  (slot projection-matrix   initialize (make-matrix) getter generate)
  (slot view-matrix         initialize (make-matrix) getter generate)
  
  ;; Textures
  (slot texture             initialize #f getter generate)
  
  ;; Render
  (slot render-thread       initialize #f getter generate)
  
  
  (method override (destroy self)
    (stop-render self)
    (nextmethod self))
  
  
  (method override (setup-opengl self)
    (setup-programs self)
    (initialize-meshes self)
    (start-render self))
  
  
  (method (setup-programs self)
    (set! mesh-program (require-program 'texture)))
  
  
  (method (start-render self)
    (let ((thread
            (new-thread
              (lambda ()
                (declare (proper-tail-calls))
                (let ((period (/ 1. 30.)))
                  (let (loop)
                    (render-scene self)
                    (sleep period)
                    (loop))))
              'render)))
      (set! render-thread thread)
      (thread-start! thread)))
  
  
  (method (stop-render self)
    (when render-thread
      (thread-terminate! render-thread)
      (set! render-thread #f)))
  
  
  ;;;
  ;;;; Meshes
  ;;;
  
  
  (method (initialize-meshes self)
    (define (create-mesh)
      (let ((mesher (new Mesher 0 1))
            (v1 (vertex -10.0 -6.0 -5.0))
            (v2 (vertex   6.0 -6.0 -5.0))
            (v3 (vertex   6.0  6.0 -5.0))
            (v4 (vertex -10.0  6.0 -5.0))
            (normal (vertex 0. 0. 1.))
            (uv (uv 0. 0. 1. 1. 0.))
            (depth 0.)
            (tl uv/left)
            (tt uv/top)
            (tr uv/right)
            (tb uv/bottom))
        (add-quad mesher
                  v1 normal tl tb 0
                  v2 normal tr tb 0
                  v3 normal tr tt 0
                  v4 normal tl tt 0
                  uv
                  depth)
        (get-mesh mesher mesh-program)))
    
    (set! texture-mesh (create-mesh)))
  
  
  ;;;
  ;;;; Resize
  ;;;
  
  
  (method override (resize-scene self width <fl> height <fl>)
    ;; Viewport
    (let ((scale-factor (main-screen-scale-factor)))
      (glViewport 0 0 (* scale-factor (fxround width)) (* scale-factor (fxround height))))
    
    ;; Projection
    (let ((ratio (/ width height)))
      (make-perspective-matrix! projection-matrix 53.13 ratio 1.0 30.0))
    
    ;; View
    (make-view-matrix! view-matrix (vertex 7. 2. 6.) (lookat (vertex -.513 -.110 -.852) (vertex -.056 .994 -.094) (vertex .857 -4.195e-8 -.516))))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-scene self)
    ;; Background
    (glClearColor 0.0 0.0 0.0 0.0)
    (glClear (bitwise-ior GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
    
    ;; Texture
    (when (not texture)
      (set! texture (make-file-cairo-texture {File Home "Media" "Oasis.png"}))
      (let ((surface (get-surface texture)))
        (flush surface)
        (map-texture texture)))
    
    ;; Mesh
    (use mesh-program)
    (bind-material mesh-program (get-id texture))
    (bind-uniforms mesh-program projection-matrix view-matrix)
    (draw-array texture-mesh)
    (unbind-uniforms mesh-program)
    (unuse mesh-program)))


;;;
;;;; Application
;;;


(class Texture-Application extends Application
  
  
  (method override (new-toplevel self)
    (new-opengl-window class: Texture-Window position: {Point 200 150} size: {Dimension 800 500})))


;;;
;;;; Run
;;;


(definition (run-texture descriptor)
  (boot-environment (new Texture-Application)))


(register-product-run 'earth.texture
  run-texture))
