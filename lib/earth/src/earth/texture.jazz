;;;==============
;;;  GaeaScheme
;;;==============
;;;
;;;; Earth Texture
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module earth.texture jazz


(import (jazz.application)
        (jazz.graphic)
        (jazz.io)
        (jazz.markup)
        (jazz.platform)
        (jazz.process)
        (jazz.screen)
        (gaea.array)
        (gaea.buffer)
        (gaea.engine)
        (gaea.generate)
        (gaea.geometry)
        (gaea.pipeline)
        (gaea.render)
        (gaea.shader)
        (gaea.texture)
        (gaea.uniform)
        (gaea.window))


;;;
;;;; Pipeline
;;;


(definition texture-sources
  (list
    ;; metal
    (list
#/C/
    #include <metal_stdlib>
    
    using namespace metal;

    struct vs_in
    {
        float4 position      [[attribute(0)]];
        float3 texture_coord [[attribute(1)]];
    };

    struct vs_out
    {
        float4 position [[position]];
        float3 texture_coord;
    };

    struct Uniforms
    {
        float4x4 projectionMatrix;
        float4x4 viewMatrix;
        float4x4 modelMatrix;
    };

    vertex vs_out vertex_simple(
        vs_in vertexIn [[stage_in]],
        constant Uniforms *uniforms [[buffer(0)]])
    {
        vs_out vertexOut;
        vertexOut.position = uniforms->projectionMatrix * uniforms->viewMatrix * uniforms->modelMatrix * vertexIn.position;
        vertexOut.texture_coord = vertexIn.texture_coord;
        return vertexOut;
    }
    
    fragment float4 fragment_simple(
        vs_out vert [[stage_in]],
        texture2d<float, access::sample> tex [[texture(0)]],
        sampler samplr [[sampler(0)]])
    {
        return tex.sample(samplr, float2(vert.texture_coord.x, vert.texture_coord.y));
    }
//#
      "vertex_simple"
      "fragment_simple")

    ;; opengl
    (list
      ;; vertex
      (string-append glsl-version
#/C/
    layout (std140) uniform Matrices
    {
        mat4 projection_matrix;
        mat4 view_matrix;
        mat4 model_matrix;
    };

    in vec3 position;
    in vec3 texture_coord;

    out vec3 final_texture;

    void main()
    {
        gl_Position = projection_matrix * view_matrix * model_matrix * vec4(position, 1.0);
        final_texture = texture_coord;
    }
//#)
      ;; fragment
      (string-append glsl-version
#/C/
    uniform sampler2D texture_sampler;

    in vec3 final_texture;

    out vec4 fragColor;

    void main()
    {
        fragColor = texture(texture_sampler, vec2(final_texture.x, final_texture.y));;
    }
//#))))


(definition texture-attributes
  (list
    (list "position"      'float3 0 1)
    (list "texture_coord" 'float2 (* 6 float-size) 1)))

(definition texture-layouts
  (list
    (list 1 (* 10 float-size))))


;;;
;;;; Window
;;;


(class Texture-Window extends Gaea-Window
  
  
  (form
    (<install> caption-base: "Texture"))
  
  
  ;; Pipelines
  (slot texture-pipeline    initialize #f getter generate)
  
  ;; Uniforms
  (slot uniform-binding     initialize 0  getter generate)
  (slot uniform-buffer      initialize #f getter generate)
  
  ;; Arrays
  (slot texture-array       initialize #f getter generate)
  
  ;; Textures
  (slot texture             initialize #f getter generate)
  
  ;; Matrices
  (slot projection-matrix   initialize (make-matrix) getter generate)
  (slot view-matrix         initialize (make-matrix) getter generate)
  
  ;; Render
  (slot render-thread       initialize #f getter generate)
  
  
  (method override (destroy self)
    (stop-render self)
    (nextmethod self))
  
  
  (method override (setup-engine self)
    ;; quicky until crashes fixed
    (platformInhibitAutoReleasePool)
    (setup-pipelines self)
    (setup-arrays self)
    (setup-textures self)
    (start-render self))
  
  
  (method (setup-pipelines self)
    (set! texture-pipeline (new Pipeline texture-sources texture-attributes texture-layouts))
    (gaea-uniform-binding texture-pipeline uniform-binding))
  
  
  ;;;
  ;;;; Arrays
  ;;;
  
  
  (method (setup-arrays self)
    (define content
      #f32( 4.0 0.5 3.0   1.0 0.0 0.0   1.0 1.0 0.0   0.0
            6.0 0.5 3.0   1.0 0.0 0.0   0.0 0.0 0.0   0.0
            5.0 2.5 3.0   1.0 0.0 0.0   1.0 0.0 0.0   0.0 ))
    
    (let ((texture-vertices (new Buffer content)))
      (set! texture-array (new Array texture-pipeline 1 3 texture-vertices))))
  
  
  ;;;
  ;;;; Textures
  ;;;
  
  
  (method (setup-textures self)
    (set! texture (make-file-cairo-texture {File Home "Media" "Oasis.png"}))
    (flush (get-surface texture))
    (map-texture texture)
    (setup-uniform texture texture-pipeline "texture_sampler"))
  
  
  ;;;
  ;;;; Resize
  ;;;
  
  
  (method override (resize-scene self width <fl> height <fl>)
    (nextmethod self width height)
    
    ;; Projection
    (let ((ratio (/ width height)))
      (make-perspective-matrix! projection-matrix 53.13 ratio 1.0 30.0))
    
    ;; View
    (make-view-matrix! view-matrix (vertex 7. 2. 6.) (lookat (vertex -.513 -.110 -.852) (vertex -.056 .994 -.094) (vertex .857 -4.195e-8 -.516)))
    
    ;; Uniform
    (when (not uniform-buffer)
      (let ((content (make-f32vector (* 3 16))))
        (matrix-transfer! projection-matrix content 0)
        (matrix-transfer! view-matrix content 16)
        (matrix-transfer! (make-identity-matrix) content 32)
        (set! uniform-buffer (new Uniform-Buffer uniform-binding content)))))
  
  
  ;;;
  ;;;; Render
  ;;;
  
  
  (method (start-render self)
    (let ((thread
            (new-thread
              (lambda ()
                (declare (proper-tail-calls))
                (let ((period (/ 1. 30.)))
                  (let (loop)
                    (render-scene self)
                    (sleep period)
                    (loop))))
              'render)))
      (set! render-thread thread)
      (thread-start! thread)))
  
  
  (method (stop-render self)
    (when render-thread
      (thread-terminate! render-thread)
      (set! render-thread #f)))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-scene self)
    (with-render self
      (lambda (encoder)
        (when uniform-buffer
          (gaea-bind-uniform encoder uniform-buffer 0))
        (with-pipeline texture-pipeline encoder
          (lambda ()
            (bind-texture texture encoder)
            (draw-array texture-array encoder)))))))


;;;
;;;; Application
;;;


(class Texture-Application extends Application
  
  
  (method override (new-toplevel self)
    (new Texture-Window position: {Point 200 150} size: {Dimension 800 500})))


;;;
;;;; Run
;;;


(definition (run-texture descriptor)
  (boot-environment (new Texture-Application)))


(register-product-run 'earth.texture
  run-texture))
