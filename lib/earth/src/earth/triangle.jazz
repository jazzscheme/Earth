;;;==============
;;;  GaeaScheme
;;;==============
;;;
;;;; Earth Triangle
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module earth.triangle jazz


(import (jazz.application)
        (jazz.graphic)
        (jazz.io)
        (jazz.markup)
        (jazz.platform)
        (jazz.process)
        (jazz.opengl)
        (jazz.opengl.glew)
        (jazz.screen)
        (gaea.geometry)
        (gaea.metal)
        (gaea.program)
        (gaea.shader)
        (gaea.window))


;;;
;;;; Color
;;;


(definition color-vert
  (string-append glsl-version
    #/C/
uniform mat4 view_matrix, projection_matrix;

in vec3 position;
in vec3 color;
in vec3 normal;

out vec4 out1;
out vec4 out2;
out vec4 out3;
out vec4 out4;

out vec3 final_color;

void main()
{
    gl_Position = projection_matrix * view_matrix * vec4(position, 1.0);
    final_color = vec3(color.x, color.y, color.z * normal.z);
    out1 = vec4(position, 1.0);
    out2 = gl_Position;
    out3 = vec4(final_color, 1.0);
    out4 = vec4(0, 0, 0, 0);
}
//#))


(definition color-frag
  (string-append glsl-version
    #/C/
in vec3 final_color;

out vec4 fragColor;

void main()
{
    fragColor = vec4(final_color, 1.0);
}
//#))


(class Color-Program extends Program
  
  
  ;; Attribute Locations
  (slot vertex-attribute          initialize #f getter generate)
  (slot normal-attribute          initialize #f getter generate)
  (slot color-attribute           initialize #f getter generate)
 
  ;; Uniform Locations
  (slot projection_matrix-uniform initialize #f getter generate)
  (slot view_matrix-uniform       initialize #f getter generate)
  
  
  (method override (prepare self)
    (set-vs self (create-vertex-shader self))
    (set-fs self (create-fragment-shader self))
    (link self)
    (set! vertex-attribute (add-attribute self "position"))
    (set! normal-attribute (add-attribute self "normal"))
    (set! color-attribute (add-attribute self "color"))
    (set! projection_matrix-uniform (add-uniform self "projection_matrix"))
    (set! view_matrix-uniform (add-uniform self "view_matrix")))
  
  
  (method override (create-vertex-shader self)
    color-vert)
  
  (method override (create-fragment-shader self)
    color-frag)
  
  
  (method package (create-vertex-buffer self vertices)
    (let ((vbo (glGenBuffers*)))
      (glBindBuffer GL_ARRAY_BUFFER vbo)
      (glBufferDataFloat* GL_ARRAY_BUFFER (f32vector-length vertices) vertices GL_STATIC_DRAW)
      (glEnableVertexAttribArray vertex-attribute)
      (glVertexAttribPointer* vertex-attribute 3 GL_FLOAT GL_FALSE (* 6 float-size) 0)
      (glEnableVertexAttribArray normal-attribute)
      (glVertexAttribPointer* normal-attribute 3 GL_FLOAT GL_FALSE (* 6 float-size) (* 3 float-size))
      (glBindBuffer GL_ARRAY_BUFFER 0)
      vbo))
  
  
  (method package (create-color-buffer self colors)
    (let ((vbo (glGenBuffers*)))
      (glBindBuffer GL_ARRAY_BUFFER vbo)
      (glBufferDataFloat* GL_ARRAY_BUFFER (f32vector-length colors) colors GL_STATIC_DRAW)
      (glEnableVertexAttribArray color-attribute)
      (glVertexAttribPointer* color-attribute 3 GL_FLOAT GL_FALSE (* 3 float-size) 0)
      (glBindBuffer GL_ARRAY_BUFFER 0)
      vbo))
  
  
  (method package (bind-uniforms self projection-matrix view-matrix)
    (glUniformMatrix4dv* projection_matrix-uniform 1 #f projection-matrix)
    (glUniformMatrix4dv* view_matrix-uniform 1 #f view-matrix))
  
  
  (method package (unbind-uniforms self)
    ))


;;;
;;;; Array
;;;


(class Array extends Object
  
  
  (slot array getter generate))


(class Color-Array extends Array
  
  
  (slot vertex-buffer)
  (slot color-buffer)
  
  
  (method override (initialize self program vertices colors)
    (set! array (glGenVertexArrays*))
    (glBindVertexArray array)
    (set! vertex-buffer (create-vertex-buffer program vertices))
    (set! color-buffer (create-color-buffer program colors))
    (glBindVertexArray 0)))


;;;
;;;; Window
;;;


(class Triangle-Window extends Gaea-Window
  
  
  (form
    (<install> caption-base: "Triangle"))
  
  
  ;; Programs
  (slot color-program       initialize #f getter generate)
  
  ;; Arrays
  (slot blue-array          initialize #f getter generate)
  (slot red-array           initialize #f getter generate)
  
  ;; Pipeline
  (slot color-pipeline      initialize #f getter generate)
  
  ;; Matrices
  (slot projection-matrix   initialize (make-matrix) getter generate)
  (slot view-matrix         initialize (make-matrix) getter generate)
  
  ;; Render
  (slot render-thread       initialize #f getter generate)
  
  
  (method override (destroy self)
    (stop-render self)
    (nextmethod self))
  
  
  (method override (setup-engine self)
    (if (opengl? self)
        (begin
          (create-programs self)
          (initialize-arrays self))
      (create-pipelines self))
    (start-render self))
  
  
  (method (start-render self)
    (let ((thread
            (new-thread
              (lambda ()
                (declare (proper-tail-calls))
                (let ((period (/ 1. 30.)))
                  (let (loop)
                    (render-scene self)
                    (sleep period)
                    (loop))))
              'render)))
      (set! render-thread thread)
      (thread-start! thread)))
  
  
  (method (stop-render self)
    (when render-thread
      (thread-terminate! render-thread)
      (set! render-thread #f)))
  
  
  ;;;
  ;;;; Programs
  ;;;
  
  
  (method (create-programs self)
    (set! color-program (new Color-Program)))
  
  
  (method (release-programs self)
    (glDeleteProgram (get-program Color-Program))
    (set! color-program #f))
  
  
  ;;;
  ;;;; Arrays
  ;;;
  
  
  (method (initialize-arrays self)
    (set! red-array (create-red self))
    (set! blue-array (create-blue self)))
  
  
  (method (create-red self)
    (let ((vertices #f32( 1.0 0.0 -5.0 0. 0. 1.
                          3.0 0.0 -5.0 0. 0. 1.
                          2.0 2.0 -5.0 0. 0. 1.))
          (colors #f32( 1.0 0.0 0.0
                        1.0 0.0 0.0
                        1.0 0.0 0.0)))
      (new Color-Array color-program vertices colors)))
  
  
  (method (create-blue self)
    (let ((vertices #f32( -3.0 0.0 -5.0 0. 0. 1.
                          -1.0 0.0 -5.0 0. 0. 1.
                          -2.0 2.0 -5.0 0. 0. 1.))
          (colors #f32( 0.0 0.0 1.0
                        0.0 0.0 1.0
                        0.0 0.0 1.0)))
      (new Color-Array color-program vertices colors)))
  
  
  ;;;
  ;;;; Pipelines
  ;;;
  
  
  (method (create-pipelines self)
    (let ((lib (metalMakeLibrary
#/C/
    #include <metal_stdlib>
    
    using namespace metal;
    
    vertex float4 v_simple(
        constant float4* in  [[buffer(0)]],
        uint             vid [[vertex_id]])
    {
        return in[vid];
    }
    
    fragment float4 f_simple(
        float4 in [[stage_in]])
    {
        return float4(1, 0, 0, 1);
    }
//#
)))
      (let ((pipeline (metalMakePipeline lib)))
        (set! color-pipeline pipeline))))
  
  
  ;;;
  ;;;; Resize
  ;;;
  
  
  (method override (resize-scene self width <fl> height <fl>)
    (when (opengl? self)
      ;; Viewport
      (let ((scale-factor (main-screen-scale-factor)))
        (glViewport 0 0 (* scale-factor (fxround width)) (* scale-factor (fxround height)))))
    
    ;; Projection
    (let ((ratio (/ width height)))
      (make-perspective-matrix! projection-matrix 53.13 ratio 1.0 30.0))
    
    ;; View
    (make-view-matrix! view-matrix (vertex 7. 2. 6.) (lookat (vertex -.513 -.110 -.852) (vertex -.056 .994 -.094) (vertex .857 -4.195e-8 -.516))))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-scene self)
    (if (opengl? self)
        (begin
          ;; Background
          (glClearColor 0.0 0.0 0.0 0.0)
          (glClear (bitwise-ior GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
          
          ;; Color
          (use color-program)
          (bind-uniforms color-program projection-matrix view-matrix)
          (glBindVertexArray (get-array blue-array))
          (glDrawArrays GL_TRIANGLES 0 3)
          (glBindVertexArray (get-array red-array))
          (glDrawArrays GL_TRIANGLES 0 3)
          (unbind-uniforms color-program)
          (unuse color-program))
      (gaea.engine.metal:render-metal-triangle self color-pipeline))))


;;;
;;;; Application
;;;


(class Triangle-Application extends Application
  
  
  (method override (new-toplevel self)
    (new Triangle-Window position: {Point 200 150} size: {Dimension 800 500})))


;;;
;;;; Run
;;;


(definition (run-triangle descriptor)
  (boot-environment (new Triangle-Application)))


(register-product-run 'earth.triangle
  run-triangle))
