;;;==============
;;;  GaeaScheme
;;;==============
;;;
;;;; Earth Mesh
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module earth.mesh jazz


(import (jazz.application)
        (jazz.graphic)
        (jazz.io)
        (jazz.markup)
        (jazz.platform)
        (jazz.process)
        (jazz.screen)
        (gaea.array)
        (gaea.buffer)
        (gaea.generate)
        (gaea.geometry)
        (gaea.mesh)
        (gaea.mesher)
        (gaea.program)
        (gaea.program.mesh)
        (gaea.program.texture)
        (gaea.render)
        (gaea.shader)
        (gaea.texture)
        (gaea.window))


;;;
;;;; Window
;;;


(class Mesh-Window extends Gaea-Window
  
  
  (form
    (<install> caption-base: "Mesh"))
  
  
  ;; Programs
  (slot mesh-program        initialize #f getter generate)
  
  ;; Meshes
  (slot texture-mesh        initialize #f getter generate)
  
  ;; Matrices
  (slot projection-matrix   initialize (make-matrix) getter generate)
  (slot view-matrix         initialize (make-matrix) getter generate)
  
  ;; Textures
  (slot texture             initialize #f getter generate)
  
  ;; Render
  (slot render-thread       initialize #f getter generate)
  
  
  (method override (destroy self)
    (stop-render self)
    (nextmethod self))
  
  
  (method override (setup-engine self)
    (terminal (require-program 'texture))
    (exit)
    (setup-programs self)
    (initialize-meshes self)
    (start-render self))
  
  
  (method (setup-programs self)
    (set! mesh-program (require-program 'texture)))
  
  
  (method (start-render self)
    (let ((thread
            (new-thread
              (lambda ()
                (declare (proper-tail-calls))
                (let ((period (/ 1. 30.)))
                  (let (loop)
                    (render-scene self)
                    (sleep period)
                    (loop))))
              'render)))
      (set! render-thread thread)
      (thread-start! thread)))
  
  
  (method (stop-render self)
    (when render-thread
      (thread-terminate! render-thread)
      (set! render-thread #f)))
  
  
  ;;;
  ;;;; Meshes
  ;;;
  
  
  (method (initialize-meshes self)
    (define content
      #f32( 1.0 0.0 -5.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0
            3.0 0.0 -5.0 1.0 0.0 0.0 1.0 0.0 0.0 0.0
            3.0 2.0 -5.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0
            3.0 2.0 -5.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0
            1.0 2.0 -5.0 1.0 0.0 0.0 0.0 1.0 0.0 0.0
            1.0 0.0 -5.0 1.0 0.0 0.0 1.0 1.0 0.0 0.0 ))
    
    (define (create-mesh)
      (let ((mesh (new Mesh)))
        (allocate-vertices mesh)
        (set-data (get-vertices-buffer mesh) content (f32vector-length content) vertex-floats)
        (setup-array mesh mesh-program)
        mesh))
    
    (set! texture-mesh (create-mesh)))
  
  
  ;;;
  ;;;; Resize
  ;;;
  
  
  (method override (resize-scene self width <fl> height <fl>)
    (nextmethod self width height)
    
    ;; Projection
    (let ((ratio (/ width height)))
      (make-perspective-matrix! projection-matrix 53.13 ratio 1.0 30.0))
    
    ;; View
    (make-view-matrix! view-matrix (vertex 7. 2. 6.) (lookat (vertex -.513 -.110 -.852) (vertex -.056 .994 -.094) (vertex .857 -4.195e-8 -.516)))
    
    ;; Textures
    (set! texture (make-cairo-texture 100 100)))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-scene self)
    (with-render self
      (lambda (encoder)
        ;; Mesh
        (let ((surface (get-surface texture)))
          (fill-rect surface {Rect 0 0 100 100} {Color Red})
          (fill-rect surface {Rect 20 20 80 80} {Color Blue})
          (flush surface)
          (map-texture texture))
        (use mesh-program)
        (bind-material mesh-program (get-id texture))
        (bind-uniforms mesh-program projection-matrix view-matrix)
        (draw-array texture-mesh)
        (unbind-uniforms mesh-program)
        (unuse mesh-program)))))


;;;
;;;; Application
;;;


(class Mesh-Application extends Application
  
  
  (method override (new-toplevel self)
    (new Mesh-Window position: {Point 200 150} size: {Dimension 800 500})))


;;;
;;;; Run
;;;


(definition (run-mesh descriptor)
  (boot-environment (new Mesh-Application)))


(register-product-run 'earth.mesh
  run-mesh))
