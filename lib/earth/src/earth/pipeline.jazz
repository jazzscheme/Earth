;;;==============
;;;  GaeaScheme
;;;==============
;;;
;;;; Earth Pipeline
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module earth.pipeline jazz


(import (jazz.application)
        (jazz.graphic)
        (jazz.io)
        (jazz.markup)
        (jazz.platform)
        (jazz.process)
        (jazz.screen)
        (gaea.array)
        (gaea.buffer)
        (gaea.engine)
        (gaea.generate)
        (gaea.geometry)
        (gaea.metal)
        (gaea.opengl.glew)
        (gaea.pipeline)
        (gaea.program)
        (gaea.render)
        (gaea.shader)
        (gaea.window))


;;;
;;;; Pipeline
;;;


(definition pipeline-sources
  (list
    ;; metal
    (list
#/C/
    #include <metal_stdlib>
    
    using namespace metal;

    struct vs_in
    {
        float4 position [[attribute(0)]];
        float4 color    [[attribute(1)]];
    };

    struct vs_out
    {
        float4 position [[position]];
        float4 color;
    };

    struct Uniforms
    {
        float4x4 projectionMatrix;
        float4x4 viewMatrix;
        float4x4 modelMatrix;
    };

    vertex vs_out vertex_simple(
        vs_in vertexIn [[stage_in]],
        constant Uniforms *uniforms [[buffer(0)]])
    {
        vs_out vertexOut;
        vertexOut.position = uniforms->projectionMatrix * uniforms->viewMatrix * uniforms->modelMatrix * vertexIn.position;
        vertexOut.color = vertexIn.color;
        return vertexOut;
    }
    
    fragment float4 fragment_simple(
        vs_out vert [[stage_in]])
    {
        return vert.color;
    }
//#
      "vertex_simple"
      "fragment_simple")

    ;; opengl
    (list
      ;; vertex
      (string-append glsl-version
#/C/
    uniform mat4 projection_matrix;
    uniform mat4 view_matrix;

    in vec4 position;
    in vec4 color;

    out vec4 final_color;

    void main()
    {
        gl_Position = projection_matrix * view_matrix * position;
        final_color = color;
    }
//#)
      ;; fragment
      (string-append glsl-version
#/C/
    in vec4 final_color;

    out vec4 fragColor;

    void main()
    {
        fragColor = final_color;
    }
//#))))


(definition red-attributes
  (list
    (list "position" 'float4 0 1)
    (list "color"    'float4 0 2)))

(definition red-layouts
  (list
    (list 1 (* 4 float-size))
    (list 2 (* 4 float-size))))


(definition blue-attributes
  (list
    (list "position" 'float4 0 1)
    (list "color"    'float4 (* 4 float-size) 1)))

(definition blue-layouts
  (list
    (list 1 (* 8 float-size))))


;;;
;;;; Window
;;;


(class Pipeline-Window extends Gaea-Window
  
  
  (form
    (<install> caption-base: "Pipeline"))
  
  
  ;; Pipelines
  (slot red-pipeline        initialize #f getter generate)
  (slot blue-pipeline       initialize #f getter generate)
  
  ;; Uniforms
  (slot uniform-buffer      initialize #f getter generate)
  (slot red-uniform-projection  initialize #f getter generate)
  (slot red-uniform-view        initialize #f getter generate)
  (slot blue-uniform-projection initialize #f getter generate)
  (slot blue-uniform-view       initialize #f getter generate)
  
  ;; Arrays
  (slot red-array           initialize #f getter generate)
  (slot blue-array          initialize #f getter generate)
  
  ;; Matrices
  (slot projection-matrix   initialize (make-matrix) getter generate)
  (slot view-matrix         initialize (make-matrix) getter generate)
  
  ;; Render
  (slot render-thread       initialize #f getter generate)
  
  
  (method override (destroy self)
    (stop-render self)
    (nextmethod self))
  
  
  (method override (setup-engine self)
    (setup-pipelines self)
    (setup-arrays self)
    (start-render self))
  
  
  (method (setup-pipelines self)
    (set! red-pipeline (new Pipeline pipeline-sources red-attributes red-layouts))
    (set! blue-pipeline (new Pipeline pipeline-sources blue-attributes blue-layouts)))
  
  
  (method (start-render self)
    (let ((thread
            (new-thread
              (lambda ()
                (declare (proper-tail-calls))
                (let ((period (/ 1. 30.)))
                  (let (loop)
                    (render-scene self)
                    (sleep period)
                    (loop))))
              'render)))
      (set! render-thread thread)
      (thread-start! thread)))
  
  
  (method (stop-render self)
    (when render-thread
      (thread-terminate! render-thread)
      (set! render-thread #f)))
  
  
  ;;;
  ;;;; Arrays
  ;;;
  
  
  (method (setup-arrays self)
    (let ((red-positions (let ((content (f32vector
                                          1.0 0.0 -5.0 1.
                                          3.0 0.0 -5.0 1.
                                          2.0 2.0 -5.0 1.)))
                           (new Buffer content)))
          (red-colors (let ((content (f32vector
                                       1. 0. 0. 1.
                                       1. 0. 0. 1.
                                       1. 0. 0. 1.)))
                        (new Buffer content)))
          (blue-vertices (let ((content (f32vector
                                          -3.0 0.0 -5.0 1.   0. 0. 1. 1.
                                          -1.0 0.0 -5.0 1.   0. 0. 1. 1.
                                          -2.0 2.0 -5.0 1.   0. 0. 1. 1.)))
                           (new Buffer content))))
      (set! red-array (new Array red-pipeline 1 3 red-positions red-colors))
      (set! blue-array (new Array blue-pipeline 1 3 blue-vertices))))
  
  
  ;;;
  ;;;; Resize
  ;;;
  
  
  (method override (resize-scene self width <fl> height <fl>)
    (nextmethod self width height)
    
    ;; Projection
    (let ((ratio (/ width height)))
      (make-perspective-matrix! projection-matrix 53.13 ratio 1.0 30.0))
    
    ;; View
    (make-view-matrix! view-matrix (vertex 7. 2. 6.) (lookat (vertex -.513 -.110 -.852) (vertex -.056 .994 -.094) (vertex .857 -4.195e-8 -.516)))
    
    ;; Uniforms
    (if (metal?)
        (set! uniform-buffer (let ((content (make-f32vector (* 3 16))))
                               (define (transfer! offset mat)
                                 (f32vector-set! content (+ offset  0) (matrix-ref mat 0))
                                 (f32vector-set! content (+ offset  1) (matrix-ref mat 1))
                                 (f32vector-set! content (+ offset  2) (matrix-ref mat 2))
                                 (f32vector-set! content (+ offset  3) (matrix-ref mat 3))
                                 (f32vector-set! content (+ offset  4) (matrix-ref mat 4))
                                 (f32vector-set! content (+ offset  5) (matrix-ref mat 5))
                                 (f32vector-set! content (+ offset  6) (matrix-ref mat 6))
                                 (f32vector-set! content (+ offset  7) (matrix-ref mat 7))
                                 (f32vector-set! content (+ offset  8) (matrix-ref mat 8))
                                 (f32vector-set! content (+ offset  9) (matrix-ref mat 9))
                                 (f32vector-set! content (+ offset 10) (matrix-ref mat 10))
                                 (f32vector-set! content (+ offset 11) (matrix-ref mat 11))
                                 (f32vector-set! content (+ offset 12) (matrix-ref mat 12))
                                 (f32vector-set! content (+ offset 13) (matrix-ref mat 13))
                                 (f32vector-set! content (+ offset 14) (matrix-ref mat 14))
                                 (f32vector-set! content (+ offset 15) (matrix-ref mat 15)))
                               
                               (transfer!  0 projection-matrix)
                               (transfer! 16 view-matrix)
                               (transfer! 32 (make-identity-matrix))
                               (metalNewBufferWithFloats content (f32vector-length content))))
      (set! red-uniform-projection (get-uniform (get-program red-pipeline) "projection_matrix"))
      (set! red-uniform-view (get-uniform (get-program red-pipeline) "view_matrix"))
      (set! blue-uniform-projection (get-uniform (get-program blue-pipeline) "projection_matrix"))
      (set! blue-uniform-view (get-uniform (get-program blue-pipeline) "view_matrix"))))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-scene self)
    (with-render self
      (lambda (encoder)
        (when (and uniform-buffer (metal?))
          (metalEncoderSetVertexBuffer encoder uniform-buffer 0))
        (with-pipeline red-pipeline encoder
          (lambda ()
            (when (and red-uniform-projection (opengl?))
              (glUniformMatrix4dv* red-uniform-projection 1 #f projection-matrix)
              (glUniformMatrix4dv* red-uniform-view 1 #f view-matrix))
            (draw-array red-array encoder)))
        (with-pipeline blue-pipeline encoder
          (lambda ()
            (when (and blue-uniform-projection (opengl?))
              (glUniformMatrix4dv* blue-uniform-projection 1 #f projection-matrix)
              (glUniformMatrix4dv* blue-uniform-view 1 #f view-matrix))
            (draw-array blue-array encoder)))))))


;;;
;;;; Application
;;;


(class Pipeline-Application extends Application
  
  
  (method override (new-toplevel self)
    (new Pipeline-Window position: {Point 200 150} size: {Dimension 800 500})))


;;;
;;;; Run
;;;


(definition (run-pipeline descriptor)
  (boot-environment (new Pipeline-Application)))


(register-product-run 'earth.pipeline
  run-pipeline))
