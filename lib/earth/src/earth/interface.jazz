;;;==============
;;;  GaeaScheme
;;;==============
;;;
;;;; Earth Interface
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module earth.interface jazz


(import (jazz.application)
        (jazz.graphic)
        (jazz.io)
        (jazz.markup)
        (jazz.platform)
        (jazz.process)
        (jazz.screen)
        (gaea.array)
        (gaea.buffer)
        (gaea.engine)
        (gaea.generate)
        (gaea.geometry)
        (gaea.mesh)
        (gaea.mesher)
        (gaea.pipeline)
        (gaea.program)
        (gaea.render)
        (gaea.shader)
        (gaea.texture)
        (gaea.uniform)
        (gaea.uv)
        (gaea.window))


;;;
;;;; Texture
;;;


(definition texture-sources
  (list
    ;; metal
    (list
#/C/
    #include <metal_stdlib>
    
    using namespace metal;

    struct vs_in
    {
        float4 position [[attribute(0)]];
        float3 texture  [[attribute(1)]];
    };

    struct vs_out
    {
        float4 position [[position]];
        float3 texture;
    };

    struct Uniforms
    {
        float4x4 projectionMatrix;
        float4x4 viewMatrix;
        float4x4 modelMatrix;
    };

    vertex vs_out vertex_simple(
        vs_in vertexIn [[stage_in]],
        constant Uniforms *uniforms [[buffer(0)]])
    {
        vs_out vertexOut;
        vertexOut.position = uniforms->projectionMatrix * uniforms->viewMatrix * uniforms->modelMatrix * vertexIn.position;
        vertexOut.texture = vertexIn.texture;
        return vertexOut;
    }
    
    fragment float4 fragment_simple(
        vs_out vert [[stage_in]],
        texture2d<float, access::sample> tex [[texture(0)]],
        sampler samplr [[sampler(0)]])
    {
        return tex.sample(samplr, float2(vert.texture.x, vert.texture.y));
    }
//#
      "vertex_simple"
      "fragment_simple")

    ;; opengl
    (list
      ;; vertex
      (string-append glsl-version
#/C/
    layout (std140) uniform Matrices
    {
        mat4 projection_matrix;
        mat4 view_matrix;
        mat4 model_matrix;
    };

    in vec4 position;
    in vec3 texture;

    out vec3 final_texture;

    void main()
    {
        gl_Position = projection_matrix * view_matrix * model_matrix * position;
        final_texture = texture;
    }
//#)
      ;; fragment
      (string-append glsl-version
#/C/
    uniform sampler2D texture_sampler;

    in vec3 final_texture;

    out vec4 fragColor;

    void main()
    {
        fragColor = texture(texture_sampler, vec2(final_texture.x, final_texture.y));;
    }
//#))))


(definition texture-layout
  (list
    (list 1 (* 8 float-size)
      (list "position" 'float4 0)
      (list "texture"  'float2 (* 4 float-size)))))


;;;
;;;; Interface
;;;


(definition interface-sources
  (list
    ;; metal
    (list
#/C/
    #include <metal_stdlib>
    
    using namespace metal;

    struct vs_in
    {
        float4 position  [[attribute(0)]];
        float2 texCoords [[attribute(1)]];
    };

    struct vs_out
    {
        float4 position [[position]];
        float2 texCoords;
    };

    struct Uniforms
    {
        float4x4 orthographicMatrix;
    };

    vertex vs_out vertex_simple(
        vs_in vertexIn [[stage_in]],
        constant Uniforms *uniforms  [[buffer(0)]])
    {
        vs_out vertexOut;
        vertexOut.position = uniforms->orthographicMatrix * vertexIn.position;
        vertexOut.texCoords = vertexIn.texCoords;
        return vertexOut;
    }
    
    fragment float4 fragment_simple(
        vs_out vert [[stage_in]],
        texture2d<float, access::sample> tex [[texture(0)]],
        sampler samplr [[sampler(0)]])
    {
        return tex.sample(samplr, vert.texCoords);
    }
//#
      "vertex_simple"
      "fragment_simple")
    
    ;; opengl
    (list
      ;; vertex
      (string-append glsl-version
#/C/
    layout (std140) uniform Matrices
    {
        mat4 orthographic_matrix;
    };

    in vec4 position;
    in vec3 texture;

    out vec3 final_texture;

    void main()
    {
        gl_Position = orthographic_matrix * position;
        final_texture = texture;
    }
//#)
      ;; fragment
      (string-append glsl-version
#/C/
    uniform sampler2D texture_sampler;

    in vec3 final_texture;

    out vec4 fragColor;

    void main()
    {
        fragColor = texture(texture_sampler, vec2(final_texture.x, final_texture.y));;
    }
//#))))


(definition interface-layout
  (list
    (list 1 (* 8 float-size)
      (list "position" 'float4 0)
      (list "texture"  'float2 (* 4 float-size)))))


;;;
;;;; Window
;;;


(class Interface-Window extends Gaea-Window
  
  
  (form
    (<install> caption-base: "Interface"))
  
  
  ;; Texture
  (slot texture-pipeline    initialize #f getter generate)
  (slot texture-array       initialize #f getter generate)
  (slot texture-texture     initialize #f getter generate)
  (slot texture-uniform     initialize #f getter generate)
  
  ;; Interface
  (slot interface-pipeline  initialize #f getter generate)
  (slot interface-array     initialize #f getter generate)
  (slot interface-texture   initialize #f getter generate)
  (slot interface-uniform   initialize #f getter generate)

  ;; Matrices
  (slot projection-matrix   initialize (make-matrix) getter generate)
  (slot view-matrix         initialize (make-matrix) getter generate)
  (slot orthographic-matrix initialize (make-matrix) getter generate)
  
  
  (method override (destroy self)
    (stop-render self)
    (nextmethod self))
  
  
  (method override (setup-engine self)
    ;; quicky until crashes fixed
    (platformInhibitAutoReleasePool)
    (init-fonts)
    (update-matrices self)
    (setup-texture self)
    (setup-interface self)
    (start-render self))
  
  
  ;;;
  ;;;; Matrices
  ;;;
  
  
  (method (update-matrices self)
    (let ((width 800)
          (height 500))
      ;; Projection
      (let ((ratio (/ width height)))
        (make-perspective-matrix! projection-matrix 53.13 ratio 1.0 30.0))
      
      ;; View
      (make-view-matrix! view-matrix (vertex 7. 2. 6.) (lookat (vertex -.513 -.110 -.852) (vertex -.056 .994 -.094) (vertex .857 -4.195e-8 -.516)))
      
      ;; Orthographic
      (make-orthographic-matrix! orthographic-matrix 0.0 10.0 0.0 10.0 0.0 10.0)))
  
  
  ;;;
  ;;;; Texture
  ;;;
  
  
  (method (setup-texture self)
    ;; Pipeline
    (set! texture-pipeline (new Pipeline (new Program texture-sources) texture-layout))
    
    ;; Array
    (let ((content
            #f32( 4.0 0.5 3.0 1.0   1.0 1.0 0.0   0.0
                  6.0 0.5 3.0 1.0   0.0 0.0 0.0   0.0
                  5.0 2.5 3.0 1.0   1.0 0.0 0.0   0.0 )))
      (let ((texture-vertices (new Buffer content)))
        (set! texture-array (new Array texture-pipeline 1 3 texture-vertices))))
    
    ;; Texture
    (set! texture-texture (make-file-cairo-texture {File Home "Media" "Oasis.png"}))
    (flush (get-surface texture-texture))
    (map-texture texture-texture)
    (setup-uniform texture-texture texture-pipeline "texture_sampler")
    
    ;; Uniform
    (let ((content (make-f32vector (* 3 16))))
      (matrix-transfer! projection-matrix content 0)
      (matrix-transfer! view-matrix content 16)
      (matrix-transfer! (make-identity-matrix) content 32)
      (set! texture-uniform (new Uniform-Buffer "Matrices" 0 content))
      (uniform-binding texture-pipeline texture-uniform)))
  
  
  ;;;
  ;;;; Interface
  ;;;
  
  
  (method (setup-interface self)
    (let ((width 800)
          (height 500))
      ;; Pipeline
      (set! interface-pipeline (new Pipeline (new Program interface-sources) interface-layout))
      
      ;; Array
      (let ((content (f32vector
                        0.0 10.0 0.0 1.0   0.0 0.0 0.0 0.0
                       10.0 10.0 0.0 1.0   1.0 0.0 0.0 0.0
                        0.0  0.0 0.0 1.0   0.0 1.0 0.0 0.0
                       10.0  0.0 0.0 1.0   1.0 1.0 0.0 0.0
                        0.0  0.0 0.0 1.0   0.0 1.0 0.0 0.0
                       10.0 10.0 0.0 1.0   1.0 0.0 0.0 0.0)))
        (let ((buffer (new Buffer content)))
          (set! interface-array (new Array interface-pipeline 1 6 buffer))))
      
      ;; Texture
      (set! interface-texture (make-cairo-texture width height scale?: #t))
      (fill-rect (get-surface interface-texture) (new Rect 100 100 (- width 100) (- height 100)) {Color Blue})
      (set-font (get-surface interface-texture) {Font font-name: tahoma point-size: 22.5})
      (draw-text (get-surface interface-texture) 110 110 (if (opengl?) "Hello OpenGL!" "Hello Metal!") {Color Yellow})
      (map-texture interface-texture)
      (setup-uniform interface-texture interface-pipeline "texture_sampler")
      
      ;; Uniform
      (let ((content (make-f32vector 16)))
        (matrix-transfer! orthographic-matrix content 0)
        (set! interface-uniform (new Uniform-Buffer "Matrices" 1 content))
        (uniform-binding interface-pipeline interface-uniform))))

  
  ;;;
  ;;;; Resize
  ;;;
  
  
  (method override (resize-scene self width <fl> height <fl>)
    (nextmethod self width height)
    (update-matrices self))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-scene self)
    (with-render self
      (lambda (encoder)
        (bind-uniform encoder interface-uniform 0)
        (with-pipeline interface-pipeline encoder
          (lambda ()
            (bind-texture interface-texture encoder)
            (draw-array interface-array encoder)))
        (bind-uniform encoder texture-uniform 0)
        (with-pipeline texture-pipeline encoder
          (lambda ()
            (bind-texture texture-texture encoder)
            (draw-array texture-array encoder)))))))


;;;
;;;; Application
;;;


(class Interface-Application extends Application
  
  
  (method override (new-toplevel self)
    (new Interface-Window position: {Point 200 150} size: {Dimension 800 500})))


;;;
;;;; Run
;;;


(definition (run-interface descriptor)
  (boot-environment (new Interface-Application)))


(register-product-run 'earth.interface
  run-interface))
