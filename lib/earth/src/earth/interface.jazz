;;;==============
;;;  GaeaScheme
;;;==============
;;;
;;;; Earth Interface
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module earth.interface jazz


(import (jazz.application)
        (jazz.graphic)
        (jazz.io)
        (jazz.markup)
        (jazz.platform)
        (jazz.process)
        (jazz.screen)
        (gaea.array)
        (gaea.buffer)
        (gaea.engine.metal)
        (gaea.generate)
        (gaea.geometry)
        (gaea.mesh)
        (gaea.mesher)
        (gaea.metal)
        (gaea.metal.texture)
        (gaea.program)
        (gaea.program.mesh)
        (gaea.program.texture)
        (gaea.shader)
        (gaea.texture)
        (gaea.uv)
        (gaea.window))


;;;
;;;; Window
;;;


(class Interface-Window extends Gaea-Window
  
  
  (form
    (<install> caption-base: "Interface"))
  
  
  ;; Pipelines
  (slot texture-pipeline    initialize #f getter generate)
  
  ;; Buffers
  (slot uniform-buffer      initialize #f getter generate)
  (slot texture-buffer      initialize #f getter generate)
  (slot texture-vertices    initialize #f getter generate)
  
  ;; Matrices
  (slot projection-matrix   initialize (make-matrix) getter generate)
  (slot view-matrix         initialize (make-matrix) getter generate)
  (slot orthographic-matrix initialize (make-matrix) getter generate)
  
  ;; Textures
  (slot texture             initialize #f getter generate)
  
  ;; Interface
  (slot interface-pipeline  initialize #f getter generate)
  (slot interface-texture   initialize #f getter generate)
  (slot interface-uniforms  initialize #f getter generate)
  (slot interface-buffer    initialize #f getter generate)
  (slot interface-vertices  initialize #f getter generate)
  
  ;; Render
  (slot render-thread       initialize #f getter generate)
  
  
  (method override (destroy self)
    (stop-render self)
    (nextmethod self))
  
  
  (method override (setup-engine self)
    (init-fonts)
    (create-pipelines self)
    (create-buffers self)
    (start-render self))
  
  
  (method (start-render self)
    (let ((thread
            (new-thread
              (lambda ()
                (declare (proper-tail-calls))
                (let ((period (/ 1. 30.)))
                  (let (loop)
                    (render-scene self)
                    (sleep period)
                    (loop))))
              'render)))
      (set! render-thread thread)
      (thread-start! thread)))
  
  
  (method (stop-render self)
    (when render-thread
      (thread-terminate! render-thread)
      (set! render-thread #f)))
  
  
  ;;;
  ;;;; Pipelines
  ;;;
  
  
  (method (create-pipelines self)
    (let ((lib (metalMakeLibrary
#/C/
    #include <metal_stdlib>
    
    using namespace metal;

    struct vs_in
    {
        float4 position [[position]];
        float2 texCoords;
    };

    struct vs_out
    {
        float4 position [[position]];
        float2 texCoords;
    };

    struct Uniforms
    {
        float4x4 projectionMatrix;
        float4x4 viewMatrix;
        float4x4 modelMatrix;
    };

    vertex vs_out vertex_simple(
        const device vs_in *vertices [[buffer(0)]],
        constant Uniforms *uniforms  [[buffer(1)]],
        uint vid [[vertex_id]])
    {
        vs_out vertexOut;
        vertexOut.position = uniforms->projectionMatrix * uniforms->viewMatrix * uniforms->modelMatrix * vertices[vid].position;
        vertexOut.texCoords = vertices[vid].texCoords;
        return vertexOut;
    }
    
    fragment float4 fragment_simple(
        vs_out vert [[stage_in]],
        texture2d<float, access::sample> tex [[texture(0)]],
        sampler samplr [[sampler(0)]])
    {
        return tex.sample(samplr, vert.texCoords);
    }
//#
)))
      (let ((pipeline (metalMakePipeline lib "vertex_simple" "fragment_simple")))
        (set! texture-pipeline pipeline)))
    
    (let ((lib (metalMakeLibrary
#/C/
    #include <metal_stdlib>
    
    using namespace metal;

    struct vs_in
    {
        float4 position [[position]];
        float2 texCoords;
    };

    struct vs_out
    {
        float4 position [[position]];
        float2 texCoords;
    };

    struct Uniforms
    {
        float4x4 orthographicMatrix;
    };

    vertex vs_out vertex_simple(
        const device vs_in *vertices [[buffer(0)]],
        constant Uniforms *uniforms  [[buffer(1)]],
        uint vid [[vertex_id]])
    {
        vs_out vertexOut;
        // vertexOut.position = uniforms->orthographicMatrix * vertices[vid].position;

        
        
    float2 pixelSpacePosition = vertices[vid].position.xy;

    // Get the viewport size and cast to float.
    float2 viewportSize = float2(800, 500);

    // To convert from positions in pixel space to positions in clip-space,
    //  divide the pixel coordinates by half the size of the viewport.
    // Z is set to 0.0 and w to 1.0 because this is 2D sample.
    vertexOut.position = vector_float4(0.0, 0.0, 0.0, 1.0);
    vertexOut.position.xy = pixelSpacePosition / (viewportSize / 2.0);
    
    
        
        vertexOut.texCoords = vertices[vid].texCoords;
        return vertexOut;
    }
    
    fragment float4 fragment_simple(
        vs_out vert [[stage_in]],
        texture2d<float, access::sample> tex [[texture(0)]],
        sampler samplr [[sampler(0)]])
    {
        return tex.sample(samplr, vert.texCoords);
    }
//#
)))
      (let ((pipeline (metalMakePipeline lib "vertex_simple" "fragment_simple")))
        (set! interface-pipeline pipeline))))
  
  
  ;;;
  ;;;; Buffers
  ;;;
  
  
  (method (create-buffers self)
    (let ((content (f32vector
                     4.0 0.5 3.0 1.   1. 1. 0. 0.
                     6.0 0.5 3.0 1.   0. 0. 0. 0.
                     5.0 2.5 3.0 1.   1. 0. 0. 0.)))
      (let ((size (f32vector-length content))
            (stride 8))
        (set! texture-buffer (metalNewBufferWithBytes content size))
        (set! texture-vertices (/ size stride)))))
  
  
  ;;;
  ;;;; Textures
  ;;;
  
  
  (method (setup-textures self)
    ;; Texture
    (when (not interface-texture)
    (set! interface-texture (make-cairo-metal-texture (get-width self) (get-height self) scale?: #f))
    (fill-rect (get-surface interface-texture) {Rect 100 100 700 400} {Color Blue})
    (set-font (get-surface interface-texture) {Font font-name: tahoma point-size: 22.5})
    (draw-text (get-surface interface-texture) 110 110 "Hello Metal!" {Color Yellow})
    (yoreplace interface-texture))
    ;; Uniforms
    (set! interface-uniforms (let ((content (make-f32vector 16)))
                               (define (transfer! offset mat)
                                 (f32vector-set! content (+ offset  0) (matrix-ref mat 0))
                                 (f32vector-set! content (+ offset  1) (matrix-ref mat 1))
                                 (f32vector-set! content (+ offset  2) (matrix-ref mat 2))
                                 (f32vector-set! content (+ offset  3) (matrix-ref mat 3))
                                 (f32vector-set! content (+ offset  4) (matrix-ref mat 4))
                                 (f32vector-set! content (+ offset  5) (matrix-ref mat 5))
                                 (f32vector-set! content (+ offset  6) (matrix-ref mat 6))
                                 (f32vector-set! content (+ offset  7) (matrix-ref mat 7))
                                 (f32vector-set! content (+ offset  8) (matrix-ref mat 8))
                                 (f32vector-set! content (+ offset  9) (matrix-ref mat 9))
                                 (f32vector-set! content (+ offset 10) (matrix-ref mat 10))
                                 (f32vector-set! content (+ offset 11) (matrix-ref mat 11))
                                 (f32vector-set! content (+ offset 12) (matrix-ref mat 12))
                                 (f32vector-set! content (+ offset 13) (matrix-ref mat 13))
                                 (f32vector-set! content (+ offset 14) (matrix-ref mat 14))
                                 (f32vector-set! content (+ offset 15) (matrix-ref mat 15)))
                               
                               (transfer! 0 orthographic-matrix)
                               (metalNewBufferWithBytes content (f32vector-length content))))
    ;; Buffer
    (let ((content (f32vector
                      400. -250. 0. 0.  @w(   0.0 10.0 0.0 1.0)   1.0 1.0 0.0 0.0
                     -400. -250. 0. 0.  @w(  10.0 10.0 0.0 1.0)   0.0 1.0 0.0 0.0
                     -400.  250. 0. 0.  @w(   0.0  0.0 0.0 1.0)   0.0 0.0 0.0 0.0
                      400. -250. 0. 0.  @w(  10.0  0.0 0.0 1.0)   1.0 1.0 0.0 0.0
                     -400.  250. 0. 0.  @w(   0.0  0.0 0.0 1.0)   0.0 0.0 0.0 0.0
                      400.  250. 0. 0.  @w(  10.0 10.0 0.0 1.0)   1.0 0.0 0.0 0.0)))
      (let ((size (f32vector-length content))
            (stride 8))
        (set! interface-buffer (metalNewBufferWithBytes content size))
        (set! interface-vertices (/ size stride)))))

  
  ;;;
  ;;;; Resize
  ;;;
  
  
  (method override (resize-scene self width <fl> height <fl>)
    ;; Projection
    (let ((ratio (/ width height)))
      (make-perspective-matrix! projection-matrix 53.13 ratio 1.0 30.0))
    
    ;; View
    (make-view-matrix! view-matrix (vertex 7. 2. 6.) (lookat (vertex -.513 -.110 -.852) (vertex -.056 .994 -.094) (vertex .857 -4.195e-8 -.516)))
    
    ;; Orthographic
    (make-orthographic-matrix! orthographic-matrix 0.0 10.0 0.0 10.0 0.0 10.0)
    
    ;; Textures
    (when interface-texture
      (close interface-texture))
    (setup-textures self)
    
    ;; Uniforms
    (set! uniform-buffer (let ((content (make-f32vector (* 3 16))))
                           (define (transfer! offset mat)
                             (f32vector-set! content (+ offset  0) (matrix-ref mat 0))
                             (f32vector-set! content (+ offset  1) (matrix-ref mat 1))
                             (f32vector-set! content (+ offset  2) (matrix-ref mat 2))
                             (f32vector-set! content (+ offset  3) (matrix-ref mat 3))
                             (f32vector-set! content (+ offset  4) (matrix-ref mat 4))
                             (f32vector-set! content (+ offset  5) (matrix-ref mat 5))
                             (f32vector-set! content (+ offset  6) (matrix-ref mat 6))
                             (f32vector-set! content (+ offset  7) (matrix-ref mat 7))
                             (f32vector-set! content (+ offset  8) (matrix-ref mat 8))
                             (f32vector-set! content (+ offset  9) (matrix-ref mat 9))
                             (f32vector-set! content (+ offset 10) (matrix-ref mat 10))
                             (f32vector-set! content (+ offset 11) (matrix-ref mat 11))
                             (f32vector-set! content (+ offset 12) (matrix-ref mat 12))
                             (f32vector-set! content (+ offset 13) (matrix-ref mat 13))
                             (f32vector-set! content (+ offset 14) (matrix-ref mat 14))
                             (f32vector-set! content (+ offset 15) (matrix-ref mat 15)))
                           
                           (transfer!  0 projection-matrix)
                           (transfer! 16 view-matrix)
                           (transfer! 32 (make-identity-matrix))
                           (metalNewBufferWithBytes content (f32vector-length content)))))
  
  
  ;;;
  ;;;; Draw
  ;;;
  
  
  (method override (draw-scene self)
    ;; Texture
    (when (not texture)
      (set! texture (make-file-cairo-metal-texture {File Home "Media" "Oasis.png"})))
    
    ;; Render
    (metalStartRender)
    (let ((layer (get-window-layer self)))
      (let ((drawable (metalLayerNextDrawable layer)))
        (let ((buffer (metalMakeCommandBuffer))
              (pass (metalMakeRenderPassDescriptor drawable)))
          (let ((encoder (metalMakeRenderCommandEncoder buffer pass)))
            ;; Interface
            (when interface-texture
              (metalEncoderSetRenderPipelineState encoder interface-pipeline)
              (let ((tex (get-id interface-texture))
                    (sampler (metalNewSamplerState)))
                (metalEncoderSetVertexBuffer encoder interface-uniforms 1)
                (metalEncoderSetVertexBuffer encoder interface-buffer 0)
                (metalEncoderSetFragmentTexture encoder tex 0)
                (metalEncoderSetFragmentSamplerState encoder sampler 0)
                (metalEncoderDrawPrimitives encoder interface-vertices))
              @w
              (metalEndEncoding encoder))
            ;; Texture
            (metalEncoderSetRenderPipelineState encoder texture-pipeline)
            (let ((tex (get-id texture))
                  (sampler (metalNewSamplerState)))
              (metalEncoderSetVertexBuffer encoder uniform-buffer 1)
              (metalEncoderSetVertexBuffer encoder texture-buffer 0)
              (metalEncoderSetFragmentTexture encoder tex 0)
              (metalEncoderSetFragmentSamplerState encoder sampler 0)
              (metalEncoderDrawPrimitives encoder texture-vertices))
            (metalEndEncoding encoder))
          (metalPresentDrawable drawable buffer)
          (metalCommit buffer))))
    (metalEndRender)))
      


;;;
;;;; Application
;;;


(class Interface-Application extends Application
  
  
  (method override (new-toplevel self)
    (new Interface-Window position: {Point 200 150} size: {Dimension 800 500})))


;;;
;;;; Run
;;;


(definition (run-interface descriptor)
  (boot-environment (new Interface-Application)))


(register-product-run 'earth.interface
  run-interface))
